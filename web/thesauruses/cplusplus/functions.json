
{
  "meta": {
    "language": "language_id",
    "language_version": "version.number",
    "language_name": "Human-Friendly Language Name"
  },
  "categories": {
    "Void Functions": [
      "void_function_no_parameters",
      "void_function_with_parameters",
      "void_function_variable_parameters"
    ],
    "Return Value Functions": [
      "return_value_function_no_parameters",
      "return_value_function_with_parameters",
      "return_value_function_variable_parameters"
    ],
    "Lambda/Anonymous Functions": [
      "anonymous_function_no_parameters",
      "anonymous_function_with_parameters",
      "anonymous_function_variable_parameters"
    ],
    "Subroutines": [
      "call_subroutine",
      "return_from_subroutine"
    ]
  },
  "functions": {
    "void_function_no_parameters": {
      "code": "void foo() { return; }",
      "comment": "Return statement is optional."
    },
    "void_function_with_parameters": {
      "code": "void foo(char c, int i, double d) { return; }",
      "comment": "Return statement is optional."
    },
    "void_function_variable_parameters": {
      "code": "template <typename ... Ts> void foo(Ts ... args){ return; }",
      "comment": "Argument types are deduced at compile time."
    },
    "return_value_function_no_parameters": {
      "code": "int foo() { return 1; }",
      "comment": "Return value is converted to return type if a conversion is available."
    },
    "return_value_function_with_parameters": {
      "code": "int foo(int x, int y){ return x + y; }",
      "comment": "Return value is converted to return type if a conversion is available."
    },
    "return_value_function_variable_parameters": {
      "code": "template <typename ... Ts> int foo(Ts ... args){ return (args + ...); }"
    },
    "anonymous_function_no_parameters": {
      "code": "[]{ return; };",
      "comment": "If the function returns a non-void value, then the type is deduced at compile-time."
    },
    "anonymous_function_with_parameters": {
      "code": "[](char c, int i){ return; }",
      "comment": "If the function returns a non-void value, then the type is deduced at compile-time."
    },
    "anonymous_function_variable_parameters": {
      "code": "[](auto ... args){ return; }",
      "comment": "If the function returns a non-void value, then the type is deduced at compile-time."
    },
    "call_subroutine": {
      "code": "foo()",
      "comment": "Calls the function 'foo' - must be defined first."
    },
    "return_from_subroutine": {
      "code": "return"
    }
  }
}
